{"version":3,"sources":["redux/actions/space-x-launch-action.js","redux/actions/actionTypes/actionTypes.js","pages/homePageComponent.js","App.js","serviceWorker.js","redux/reducers/spacex-launch.js","axios.js","redux/sagas/space-x-launch-saga.js","redux/sagas/index.js","redux/configure.js","index.js"],"names":["getSpacexSuccessfulLaunchFailed","success","type","Home","this","props","getAllSpaceXData","Helmet","flags","initialSpaceXData","getSpaceXYearWiseData","getSpaceXSuccessLaunchData","getSpaceXSuccessLandingData","className","head","map","year","index","key","to","onClick","flag","toLowerCase","spacexData","src","links","mission_patch_small","alt","mission_name","flight_number","mission_id","length","id","launch_year","launch_success","rocket","first_stage","cores","landing","land_success","Component","connect","state","spacexLaunch","dispatch","data","yearFilter","successLaunch","successLanding","App","path","render","from","Boolean","window","location","hostname","match","initialState","spaceXLaunchReducer","action","allData","yearWiseData","axiosInstance","axios","create","baseURL","defaults","headers","common","interceptors","response","use","error","JSON","stringify","config","hasOwnProperty","errorHandle","Promise","reject","message","initialiseSpaceXDataSaga","initialiseSpaceXYearWiseData","initialiseSpaceXSuccessLaunch","initialiseSpaceXSuccessLanding","getSpaceXLaunchAllData","getSpaceXYearWiseDataSaga","getSpacexSuccessfulLaunchSaga","getSpaceXSuccessfulLanding","call","spaceXAllDataResponse","put","spaceXYearWiseData","spaceXSuccessfullData","actions","watchSpaceXLaunchProgram","watchSpaceXYearWiseData","watchSpaceXSuccessFullLaunch","watchSpaceSuccessFullLanding","takeEvery","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","sagaMiddleWare","createSagaMiddleware","rootReducer","combineReducers","store","createStore","applyMiddleware","thunk","run","ConfigureStore","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.e6e96cd2.chunk.js","sourcesContent":["import * as actionTypes from './actionTypes/actionTypes';\n\nexport const initialiseSpaceXData = () => {\n    return {\n        type: actionTypes.INIT_SPACE_X_LAUNCH_PROGRAM,\n    }\n}\n\nexport const initialiseSpaceXFilterYearData = (yearFilter) => {\n    return {\n        type: actionTypes.INIT_SPACE_X_FILTER_DATA,\n        yearFilter\n    }\n}\n\nexport const initialiseSpaceXSuccessfulLaunchData = (successLaunch) => {\n    return {\n        type: actionTypes.INIT_SPACE_X_FILTER_SUCCESS_LAUNCHING,\n        successLaunch\n\n    }\n}\n\nexport const initialiseSpaceXSuccessfulLandingData = (successLanding) => {\n    return {\n        type: actionTypes.INIT_SPACE_X_FILTER_SUCCESS_LANDING,\n        successLanding\n\n    }\n}\n\nexport const getSpaceXLaunchAllData = (allData) => {\n    return {\n        type: actionTypes.GET_SPACE_X_LAUNCH_ALL_DATA,\n        allData\n    }\n}\n\nexport const getSpaceXLaunchAllDataFailed = (error) => {\n    return {\n        type: actionTypes.GET_SPACE_X_LAUNCH_ALL_DATA_FAILED,\n        error\n    }\n}\n\nexport const getSpaceXYearWiseData = (yearWiseData) => {\n    return {\n        type: actionTypes.GET_SPACE_X_FILTER_DATA,\n        yearWiseData\n    }\n}\n\nexport const getSpaceXYearWiseDataFailed = (error) => {\n    return {\n        type: actionTypes.GET_SPACE_X_FILTER_DATA,\n        error\n    }\n}\n\nexport const getSpacexSuccessfulLaunch = (success) => {\n    return {\n        type: actionTypes.GET_SPACE_X_LAUNCH_SUCCESS_FILTER,\n        success\n    }\n}\n\nexport const getSpacexSuccessfulLaunchFailed = (success) => {\n    return {\n        type: actionTypes.GET_SPACE_X_LAUNCH_SUCCESS_FILTER_FAILED,\n        success\n    }\n}\n\nexport const getSpaceXSuccessfulLanding = (successLanding) => {\n    return{\n        type: actionTypes.GET_SPACE_X_LANDING_SUCCESS_FILTER,\n        successLanding\n    }\n}\n\nexport const getSpaceXSuccessfulLandingFailed = (error) => {\n    return{\n        type: actionTypes.GET_SPACE_X_LANDING_SUCCESS_FILTER_FAILED,\n        error\n    }\n}","export const INIT_SPACE_X_LAUNCH_PROGRAM = 'INIT_SPACE_X_LAUNCH_PROGRAM';\nexport const INIT_SPACE_X_FILTER_DATA = 'INIT_SPACE_X_FILTER_DATA';\nexport const INIT_SPACE_X_FILTER_SUCCESS_LAUNCHING = 'INIT_SPACE_X_FILTER_SUCCESS_LAUNCHING';\nexport const INIT_SPACE_X_FILTER_SUCCESS_LANDING = 'INIT_SPACE_X_FILTER_SUCCESS_LANDING';\nexport const GET_SPACE_X_LAUNCH_ALL_DATA = 'GET_SPACE_X_LAUNCH_ALL_DATA';\nexport const GET_SPACE_X_LAUNCH_ALL_DATA_FAILED = 'GET_SPACE_X_LAUNCH_ALL_DATA_FAILED';\nexport const GET_SPACE_X_FILTER_DATA = 'GET_SPACE_X_FILTER_DATA';\nexport const GET_SPACE_X_FILTER_DATA_FAILED = 'GET_SPACE_X_FILTER_DATA_FAILED';\nexport const GET_SPACE_X_LAUNCH_SUCCESS_FILTER = 'GET_SPACE_X_LAUNCH_SUCCESS_FILTER';\nexport const GET_SPACE_X_LAUNCH_SUCCESS_FILTER_FAILED = 'GET_SPACE_X_LAUNCH_SUCCESS_FILTER_FAILED';\nexport const GET_SPACE_X_LANDING_SUCCESS_FILTER = 'GET_SPACE_X_LANDING_SUCCESS_FILTER';\nexport const GET_SPACE_X_LANDING_SUCCESS_FILTER_FAILED = 'GET_SPACE_X_LANDING_SUCCESS_FILTER_FAILED';","import React, { Component } from 'react';\nimport { Helmet } from 'react-helmet';\nimport { connect } from 'react-redux';\nimport * as actionCreators from '../redux/actions/space-x-launch-action';\nimport { Link } from 'react-router-dom';\n\nclass Home extends Component {\n\n    componentDidMount() {\n        this.props.getAllSpaceXData();\n    }\n\n    head() {\n        return (\n            <Helmet>\n                <title>Space X Program</title>\n            </Helmet>\n        )\n    }\n\n    render() {\n        const launchYears = ['2006', '2007', '2008', '2009', '2010', '2011', '2012', '2013', '2014',\n            '2015', '2016', '2017', '2018', '2019', '2020'];\n        const flags = ['True', 'False'];\n        const { initialSpaceXData, getSpaceXYearWiseData,\n            getSpaceXSuccessLaunchData, getSpaceXSuccessLandingData } = this.props;\n        return (\n            <div className=\"container main-gray py-3 my-4\">\n                {this.head()}\n                <p className=\"title\">SpaceX Launch Programs</p>\n                <div className=\"row my-3\">\n                    <div className=\"col-12 col-md-5 col-lg-3 mb-3\">\n                        <div className=\"card-deck-wrapper\">\n                            <div className=\"card-deck\">\n                                <div className=\"card p-3\">\n                                    <h4 className=\"title\">Filters</h4>\n                                    <p className=\"text-center border-bottom\">Launch Year</p>\n                                    <div className=\"col-12 col-lg-12 d-flex flex-wrap justify-content-around\">\n                                        {launchYears.map((year, index) => (\n                                            <Link key={index} type=\"button\" to={`/home?year=${year}`}\n                                                onClick={() => getSpaceXYearWiseData(year)}\n                                                className=\"btn-success my-2 font-btn year-btn\">{year}</Link>\n                                        ))}\n                                    </div>\n                                    <p className=\"text-center border-bottom mt-2\">Successful Launch</p>\n                                    <div className=\"col-12 d-flex filter-center flex-wrap\">\n                                        {flags.map((flag, index) => (\n                                            <Link key={index} onClick={() => getSpaceXSuccessLaunchData(flag.toLowerCase())}\n                                                to={`/home?success=${flag.toLowerCase()}`}\n                                                type=\"button\"\n                                                className=\"btn-success justify-content-between my-2 font-btn year-btn\">{flag}</Link>\n                                        ))}\n                                    </div>\n                                    <p className=\"text-center border-bottom mt-2\">Successful Landing</p>\n                                    <div className=\"col-12 d-flex filter-center flex-wrap\">\n                                        {flags.map((flag, index) => (\n                                            <Link key={index} \n                                            type=\"button\" \n                                            onClick={() => getSpaceXSuccessLandingData(flag.toLowerCase())} \n                                            to={`/home?success=${flag.toLowerCase()}`} \n                                            className=\"btn-success justify-content-between my-2 font-btn year-btn\">{flag}</Link>\n                                        ))}\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                    <div className=\"col-12 col-md-7 col-lg-9 d-flex flex-wrap\">\n                        {initialSpaceXData && initialSpaceXData.map((spacexData, index) => (\n                            <div className=\"col-12 col-md-6 col-lg-3 mb-3 grid-view\" key={index}>\n                                <div className=\"card-deck-wrapper h-100\">\n                                    <div className=\"card-deck h-100\">\n                                        <div className=\"card p-3\">\n                                            <div className=\"main-gray p-3 text-center\">\n                                                <img src={spacexData.links.mission_patch_small} alt={spacexData.mission_name} className=\"img-fluid\" />\n                                            </div>\n                                            <p className=\"mt-2  mission-font-color common-font mission-num\">{spacexData.mission_name + ' #' + spacexData.flight_number}</p>\n                                            <p className=\"mb-0 mission-id common-font\">{'Mission Ids:'}</p>\n                                            {spacexData.mission_id.length > 0 ? spacexData.mission_id.map((id, index) => (\n                                                <ul key={index} className=\"pl-4 mb-0\">\n                                                    <li className=\"common-font\">\n                                                        {id}\n                                                    </li>\n                                                </ul>\n                                            )) : <p className=\"mb-1 common-font\">Not Available</p>}\n                                            <p className=\"mission-id common-font mb-1\">Launch Year: <span className=\"launches mission-font-color\">{spacexData.launch_year}</span></p>\n                                            <div className=\"mission-id common-font mb-1\"><p className=\"mb-0\">Successful <span className=\"launches mission-font-color\">{' ' + spacexData.launch_success}</span></p> Launch:</div>\n                                            {spacexData.rocket.first_stage.cores.map((landing, index) => (\n                                                <div key={index} className=\"mission-id common-font\"><p className=\"mb-0\">Successful <span className=\"launches mission-font-color\">{' ' + landing.land_success}</span></p> Landing:</div>\n                                            ))}\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                        ))}\n                    </div>\n                </div>\n                <div className=\"creator text-center\">Developed by: <span>Nitin Arora</span></div>\n            </div>\n        );\n    }\n}\n\nconst mapPropsToDispatch = (dispatch) => {\n    return {\n        getAllSpaceXData: () => dispatch(actionCreators.initialiseSpaceXData()),\n        getSpaceXYearWiseData: (data) => dispatch(actionCreators.initialiseSpaceXFilterYearData(data)),\n        getSpaceXSuccessLaunchData: (data) => dispatch(actionCreators.initialiseSpaceXSuccessfulLaunchData(data)),\n        getSpaceXSuccessLandingData: (data) => dispatch(actionCreators.initialiseSpaceXSuccessfulLandingData(data)),\n    }\n}\n\nconst mapPropsToState = (state) => {\n    return {\n        initialSpaceXData: state.spacexLaunch.initialSpaceXData,\n    }\n}\n\nexport default connect(mapPropsToState, mapPropsToDispatch)(Home);","import React, { Component } from 'react';\nimport { BrowserRouter, Switch, Route, Redirect } from 'react-router-dom';\nimport './App.scss';\nimport Home from './pages/homePageComponent';\n\nclass App extends Component {\n  render() {\n\n    return (\n      <BrowserRouter>\n        <Switch>\n          <Route path=\"/home\" render={props => (\n            <Home {...props} />\n          )} />\n          <Route  path=\"/home?year=\"  render={props => (\n            <Home {...props} />\n          )} />\n          <Route  path=\"/home?success=\"  render={props => (\n            <Home {...props} />\n          )} />\n          <Redirect from={`/`} to={`home`} render={props => (\n            <Home {...props} />\n          )} />\n        </Switch>\n      </BrowserRouter>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import * as actionTypes from '../actions/actionTypes/actionTypes';\n\nconst initialState = {\n    initialSpaceXData: [],\n}\n\nconst spaceXLaunchReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case actionTypes.GET_SPACE_X_LAUNCH_ALL_DATA: {\n            return {\n                ...state,\n                initialSpaceXData: action.allData\n            }\n        }\n\n        case actionTypes.GET_SPACE_X_LAUNCH_ALL_DATA_FAILED: {\n            return {\n                ...state,\n                initialSpaceXData: []\n            }\n        }\n        case actionTypes.GET_SPACE_X_FILTER_DATA: {\n            return {\n                ...state,\n                initialSpaceXData: action.yearWiseData,\n            }\n        }\n\n        case actionTypes.GET_SPACE_X_FILTER_DATA_FAILED: {\n            return {\n                ...state,\n                initialSpaceXData: [],\n            }\n        }\n        case actionTypes.GET_SPACE_X_LAUNCH_SUCCESS_FILTER: {\n            return {\n                ...state,\n                initialSpaceXData: action.success,\n            }\n        }\n        case actionTypes.GET_SPACE_X_LAUNCH_SUCCESS_FILTER_FAILED: {\n            return {\n                ...state,\n                initialSpaceXData: [],\n            }\n        }\n        case actionTypes.GET_SPACE_X_LANDING_SUCCESS_FILTER: {\n            return {\n                ...state,\n                initialSpaceXData: action.successLanding,\n            }\n        }\n        case actionTypes.GET_SPACE_X_LANDING_SUCCESS_FILTER_FAILED: {\n            return {\n                ...state,\n                initialSpaceXData: [],\n            }\n        }\n        default:\n            return state;\n    }\n}\n\nexport default spaceXLaunchReducer;","import axios from 'axios';\n\nconst axiosInstance = axios.create({\n    baseURL: 'https://api.spaceXdata.com/',\n});\naxiosInstance.defaults.headers.common['Content-Type'] = 'application/json';\naxiosInstance.interceptors.response.use(response => {\n    return response.data;\n}, error => {\n    if (JSON.stringify(error.config.hasOwnProperty('errorHandle') && error.config.errorHandle === false)) {\n        return Promise.reject(error.message);\n    }\n    if (error.response) {\n        return error.response.data.message;\n    }\n})\n\nexport default axiosInstance;\n","import * as actions from '../actions/space-x-launch-action';\nimport { call, put } from 'redux-saga/effects';\nimport axios from '../../axios';\n\n\nexport function* initialiseSpaceXDataSaga() {\n    yield call(getSpaceXLaunchAllData);\n}\n\nexport function* initialiseSpaceXYearWiseData(action) {\n    yield call(getSpaceXYearWiseDataSaga, action.yearFilter);\n}\n\nexport function* initialiseSpaceXSuccessLaunch(action) {\n    yield call(getSpacexSuccessfulLaunchSaga, action.successLaunch);\n}\n\nexport function* initialiseSpaceXSuccessLanding(action) {\n    yield call(getSpaceXSuccessfulLanding, action.flag);\n}\n\nexport function* getSpaceXLaunchAllData() {\n    try {\n        const spaceXAllDataResponse = yield call([axios, 'get'], `v3/launches?limit=100`);\n        if (spaceXAllDataResponse) {\n            yield put(actions.getSpaceXLaunchAllData(spaceXAllDataResponse));\n        }\n    } catch (err) {\n        yield put(actions.getSpaceXLaunchAllDataFailed(err));\n    }\n}\n\nexport function* getSpaceXYearWiseDataSaga(year) {\n    try {\n        if (year) {\n            const spaceXYearWiseData = yield call([axios, 'get'], `v3/launches?limit=10&amp;launch_success=true&amp;land_success=true&amp;launch_year=${year}`);\n            if (spaceXYearWiseData) {\n                yield put(actions.getSpaceXYearWiseData(spaceXYearWiseData));\n            }\n        }\n    } catch (err) {\n        yield put(actions.getSpaceXYearWiseDataFailed(err));\n    }\n}\n\nexport function* getSpacexSuccessfulLaunchSaga(flag) {\n    try {\n        const spaceXSuccessfullData = yield call([axios, 'get'], `v3/launches?limit=15&amp;launch_success=${flag}`);\n        if (spaceXSuccessfullData) {\n            yield put(actions.getSpacexSuccessfulLaunch(spaceXSuccessfullData));\n        }\n    } catch (err) {\n        yield put(actions.getSpacexSuccessfulLaunchFailed(err));\n    }\n}\n\nexport function* getSpaceXSuccessfulLanding(flag) {\n    try {\n        const spaceXSuccessfullData = yield call([axios, 'get'], `v3/launches?limit=20&amp;launch_success=true&amp;land_success=${flag}`);\n        if (spaceXSuccessfullData) {\n            yield put(actions.getSpaceXSuccessfulLanding(spaceXSuccessfullData));\n        }\n    } catch (err) {\n        yield put(actions.getSpaceXSuccessfulLandingFailed(err));\n    }\n}\n","import * as actionTypes from '../actions/actionTypes/actionTypes';\nimport { takeEvery } from 'redux-saga/effects';\nimport { initialiseSpaceXDataSaga, initialiseSpaceXYearWiseData, initialiseSpaceXSuccessLaunch, initialiseSpaceXSuccessLanding }\n from '../sagas/space-x-launch-saga';\n\nexport function* watchSpaceXLaunchProgram() {\n    yield takeEvery(actionTypes.INIT_SPACE_X_LAUNCH_PROGRAM, initialiseSpaceXDataSaga);\n}\n\nexport function* watchSpaceXYearWiseData() {\n     yield takeEvery(actionTypes.INIT_SPACE_X_FILTER_DATA, initialiseSpaceXYearWiseData);\n }\n\nexport function* watchSpaceXSuccessFullLaunch() {\n    yield takeEvery(actionTypes.INIT_SPACE_X_FILTER_SUCCESS_LAUNCHING, initialiseSpaceXSuccessLaunch);\n}\n\nexport function* watchSpaceSuccessFullLanding() {\n    yield takeEvery(actionTypes.INIT_SPACE_X_FILTER_SUCCESS_LANDING, initialiseSpaceXSuccessLanding);\n}","import { createStore, combineReducers, compose, applyMiddleware } from \"redux\";\nimport createSagaMiddleware from \"redux-saga\";\nimport thunk from \"redux-thunk\";\nimport spaceXLaunchReducer from \"./reducers/spacex-launch\";\nimport { watchSpaceXLaunchProgram , watchSpaceXYearWiseData, watchSpaceXSuccessFullLaunch, watchSpaceSuccessFullLanding}\n from './sagas';\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst sagaMiddleWare = createSagaMiddleware();\n\nconst rootReducer = combineReducers({\n    spacexLaunch: spaceXLaunchReducer,\n});\n\nexport const ConfigureStore = () => {\n    const store = createStore(\n        rootReducer,\n        composeEnhancers(\n            applyMiddleware(thunk, sagaMiddleWare)\n        )\n    );\n    sagaMiddleWare.run(watchSpaceXLaunchProgram);\n    sagaMiddleWare.run(watchSpaceXYearWiseData);\n    sagaMiddleWare.run(watchSpaceXSuccessFullLaunch);\n    sagaMiddleWare.run(watchSpaceSuccessFullLanding);\n    return store;\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { ConfigureStore } from './redux/configure';\nimport { Provider } from 'react-redux';\nimport 'bootstrap/dist/css/bootstrap.css';\n\n\nconst store = ConfigureStore();\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}